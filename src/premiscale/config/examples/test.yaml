## @param version [string] The version of the configuration file.
version: v1alpha1

## @section Controller Configuration

## @param controller [object] Configure the controller, such as database connection criteria and how often to take certain controller-specific actions.
controller:
  ## @param controller.pidFile [string, default: /opt/premiscale/premiscale.pid] Path to the file where the controller daemon process writes its PID.
  pidFile: /opt/premiscale/premiscale.pid

  ## @section Healthcheck Configuration

  ## @param controller.healthcheck [object] Configure the healthcheck endpoint for the controller.
  healthcheck:
    ## @param controller.healthcheck.host [string, default: 127.0.0.1] The host to bind the healthcheck endpoint to.
    host: 127.0.0.1

    ## @param controller.healthcheck.port [default: 8085] The port to bind the healthcheck endpoint to.
    port: 8085

    ## @param controller.healthcheck.path [string, default: /healthz] The path to bind the healthcheck endpoint to.
    path: /healthz

  ## @section Database Configuration

  databases:
    ## @param controller.databases.state [object] State is where the ASGs' current state as of the (latest reconciliation loop execution) is stored so it can be queried without making additional calls through libvirt.
    state:
      ## @param controller.databases.state.type [string, default: mysql] The type of database to use for storing state. Can be 'mysql' or 'sqlite' or 'memory'.
      type: mysql

      ## @param controller.databases.state.collectionInterval [default: 60] How often the agent collects state data and stores it in the database.
      collectionInterval: 60

      ## @param controller.databases.state.connection [object] Connection details for the state database.
      connection:
        ## @param controller.databases.state.connection.url [string, default: $MYSQL_HOST] The URL of the database.
        url: $MYSQL_HOST

        ## @param controller.databases.state.connection.database [string, default: $MYSQL_DATABASE] The name of the database to create or use, if it already exists.
        database: $MYSQL_DATABASE

        ## @param controller.databases.state.connection.credentials [object] The credentials to use to connect to the database.
        credentials:
          ## @param controller.databases.state.connection.credentials.username [string, default: $MYSQL_USERNAME] The username to use to connect to the database.
          username: $MYSQL_USERNAME

          ## @param controller.databases.state.connection.credentials.password [string, default: $MYSQL_PASSWORD] The password to use to connect to the database.
          password: $MYSQL_PASSWORD

    timeseries:
      ## @param controller.databases.timeseries.type [string, default: influxdb] The type of database to use for storing time series data. Can be 'influxdb' or 'memory'.
      type: influxdb

      ## @param controller.databases.timeseries.collectionInterval [default: 60] How often the agent retrieves time series data from all of the connected hosts.
      collectionInterval: 60

      ## @param controller.databases.timeseries.maxThreads [default: 10] Establish connections to hosts in maxThreads-batches.
      maxThreads: 10

      ## @param controller.databases.timeseries.hostConnectionTimeout [default: 60] How long to wait for a connection to a host before timing out.
      hostConnectionTimeout: 60

      ## @param controller.databases.timeseries.trailing [default: 1200] Seconds of collected time series data to keep and evaluate upon (must be >=interval). Default is 20 minutes
      trailing: 1200

      ## @param controller.databases.timeseries.connection [object] Connection details for the time series database.
      connection:
        ## @param controller.databases.timeseries.connection.url [string, default: $INFLUXDB_HOST] The URL of the database.
        url: $INFLUXDB_HOST

        ## @param controller.databases.timeseries.connection.database [string, default: $TIMESERIES_DATABASE] The name of the database to create or use.
        database: $TIMESERIES_DATABASE

        ## @param controller.databases.timeseries.connection.credentials [object] The credentials to use to connect to the database.
        credentials:

          ## @param controller.databases.timeseries.connection.credentials.username [string, default: $INFLUXDB_USERNAME] The username to use to connect to the database.
          username: $INFLUXDB_USERNAME

          ## @param controller.databases.timeseries.connection.credentials.password [string, default: $INFLUXDB_PASSWORD] The password to use to connect to the database.
          password: $INFLUXDB_PASSWORD

  ## @section Platform Configuration

  ## @param controller.platform [object] Configure the platform
  platform:
    ## @param controller.platform.actionsQueueMax [default: 0] The maximum number of actions from the platform to queue up before dropping them. 0 means no limit.
    actionsQueueMaxSize: 0

    ## @param controller.platform.domain [string, default: $PREMISCALE_PLATFORM] The domain of the platform.
    domain: $PREMISCALE_PLATFORM

    ## @param controller.platform.certificates [object] For local-only testing, you can provide self-signed certificates to the controller for connection to the platform services.
    certificates:
      ## @param controller.platform.certificates.path [string, default: /opt/premiscale/certs] Path to a directory containing the controller's certificates.
      path: $PREMISCALE_CACERT

  ## @section Reconciliation Configuration

  reconciliation:
    ## @param controller.reconciliation.interval [default: 60] How often the controller reconciles the state of the ASGs. The controller collects time series data and state in separate databases and queues up actions for autoscaling groups.
    interval: 60

  ## @section Autoscaling Configuration

  ## @param autoscale [object] Configure hosts and autoscaling groups on those hosts.
  autoscale:
    ## @param autoscale.hosts [object] Groups of hosts to assign to ASGs.
    hosts:
      - name: domain-1
        address: domain-1
        protocol: ssh
        port: 22
        hypervisor: kvm
        resources:
          cpu: 2
          memory: 96
      - name: domain-2
        address: domain-2
        protocol: tls
        port: 6910
        hypervisor: kvm
      - name: domain-3
        address: domain-3
        protocol: ssh
        port: 22
        hypervisor: kvm

    ## @param controller.autoscale.groups [object] Specify and configure autoscaling groups on the hosts above.
    groups:
      ## @param controller.autoscale.groups.asg-1 [object] An example ASG configuration.
      asg-1:
        ## @param controller.autoscale.groups.asg-1.image [object] The image to use for VMs in this group.
        image: root.qcow

        ## @param controller.autoscale.groups.asg-1.name [string] The name of the Libvirt domain to use as a template for VMs in this group.
        domainName: template-ubuntu20.04-server

        ## @param controller.autoscale.groups.asg-1.imageMigration [string, default: migrate] Options could be 'migrate' or 'centralized'. If set to migrate, the controller will copy the specified domain to every host, or, if centralized, the controller will not attempt to move the domain to every host a VM is created on.
        imageMigrationType: migrate

        cloudInit:
          user_data: ''
          meta_data: ''
          network_data: ''
          vendor_data: ''

        # Groups of hosts on which to provision VMs.
        hosts:
          - domain-1

        replacement:
          strategy: rollingUpdate
          # replace one VM at a time if there's an image update in a group in this file, etc.
          maxUnavailable: 0
          maxSurge: 1

        networking:
          # A static IP range or list of IPs that should be given to a group.
          type: dynamic
          addresses:
            - 192.168.5.2-192.168.5.254
          subnet: 255.255.255.0
          gateway: 192.168.1.1

        scaling:
          # maxNodes should not be larger than the number of IP addresses determined to be available in the range.
          max: 10
          min: 3
          # Increment by up-to or down-by this many nodes any time a change is required to state. Limits how large of an action the ASG can make every cooldown period.
          increment: 1
          # Seconds, minutes or hours until another action can be taken once a change is made. Basically puts a pause on metrics reconciliation once an action has been taken.
          cooldown: 60

          # The ASG scheduling methods are as follows:
          # random: schedule VMs anywhere on any host.
          # linear-random: don't reuse server racks immediately once drained, but once a VM is scheduled on a host, prioritize scheduling to that host.
          # linear: reuse server racks immediately once drained.
          # vacancy: prioritize hosts with the most vacancy.
          method: vacancy

          ## @param controller.autoscale.groups.asg-1.targetUtilization [object] The target utilization of the ASG before scaling up or down.
          targetUtilization:
            # I need to work out how to determine percentages and such here. Disk IO isn't as straightforward. CPU could be based on VM load average? And memory could be based more-easily on a percentage.
            cpu: 80
            memory: 80
      # asg-2: {}