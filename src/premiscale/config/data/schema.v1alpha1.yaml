version: enum('v1alpha1')
agent:
  platform: include('platform')
  databases: include('databases')
autoscale:
  hosts: include('hosts')
  groups: include('groups')
---
platform:
  actionsQueueMax: int(min=0)
  domain: str(min=1)
---
databases:
  state: include('state')
  metrics: include('metrics')
---
state:
  type: enum('mysql')
  connection: include('connection')
  reconcileInterval: int(min=5)
---
metrics:
  type: enum('influxdb')
  connection: include('connection')
  trailing: int(min=0)
  collectionInterval: int(min=5)
  hostConnectionTimeout: int(min=1)
  maxThreads: int(min=0)
---
connection:
  url: str(min=1)
  database: str(min=1)
  credentials:
    username: str(min=1)
    password: str(min=1)
---
hosts: map(include('host'), min=1)
---
host: list(include('hostMember'), min=1)
---
hostMember:
  name: str(min=1)
  address: str(min=1)
  port: int(min=1, max=65535)
  protocol: enum('ssh', 'SSH', 'tls', 'TLS')
  hypervisor: enum('kvm', 'xen', 'esx')
---
groups: map(include('group'), min=1)
---
group:
  image: str(min=1)
  name: str(min=1)
  imageMigration: enum('migrate', 'centralized')
  cloud-init:
    inline: str(min=1)
    file: str(min=1)
  hosts: any(include('hosts'), list(min=1))
  replacement:
    strategy: enum('rollingUpdate')
    maxUnavailable: int(min=0)
    maxSurge: int(min=0)
  networking:
    # Ignore in the case that the users' cloud-init scripts perform the networking.
    type: enum('static', 'dynamic', 'ignore')
    addresses: list(str(min=1), min=1)
    subnet: str(min=1)
    gateway: str(min=1)
  scaling:
    method: enum('random', 'vacancy', 'linear', 'linear-random')
    maxNodes: int(min=0)
    minNodes: int(min=0)
    increment: int(min=0)
    cooldown: int(min=0)
    overProvision: include('resources')
    resourceTarget: include('resources')
---
resources:
  cpu: int(min=0, max=100)
  memory: int(min=0, max=100)
  io: int(min=0, max=100)