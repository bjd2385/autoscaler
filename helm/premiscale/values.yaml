## @section Global Configuration

global:
  image:
    ## @param global.image.registry [string, default: docker.io] The global docker registry for all of the image.
    registry: docker.io

    ## @param global.image.pullSecrets [array, default: []] Container registry pull secrets applied to every container image.
    pullSecrets: []

## @section Controller Deployment

deployment:
  image:
    ## @param deployment.image.name [string, default: premiscale/premiscale] The name of the controller image.
    name: premiscale/premiscale

    ## @param deployment.image.tag [string, default: 0.0.1] The tag of the controller image.
    tag: 0.0.1

    ## @param deployment.image.pullPolicy [string, default: Always] The pull policy of the controller image.
    pullPolicy: Always

    ## @param deployment.image.pullSecrets [array, default: []] Container registry pull secrets that only pertain to this container image.
    pullSecrets: []

  resources:
    requests:
      ## @param deployment.resources.requests.cpu [default: 0.5] The CPU request for the controller container.
      cpu: 0.5

      ## @param deployment.resources.requests.memory [default: 1Gi] The memory request for the controller container.
      memory: 1Gi
    limits:
      ## @param deployment.resources.limits.cpu [default: 4.0] The CPU limit for the controller container.
      cpu: 4.0

      ## @param deployment.resources.limits.memory [default: 2Gi] The memory limit for the controller container.
      memory: 2Gi

  ## @param deployment.podSecurityContext [object] Configure the controller pod's security context.
  podSecurityContext: {}

  ## @param deployment.containerSecurityContext [object] Configure the controller container's security context.
  containerSecurityContext: {}

  ## @param deployment.annotations [object] Annotations to be added to the deployment.
  annotations: {}

  ## @param deployment.labels [object] Labels to be added to the deployment.
  labels: {}

  ## @param deployment.startupProbe [object] Configure the deployment's startup probe.
  startupProbe:
    enabled: false
    path: /health
    port: 8080
    config: {}

  ## @param deployment.livenessProbe [object] Configure the deployment's liveness probe.
  livenessProbe:
    enabled: false
    path: /health
    port: 8080
    config: {}

  ## @param deployment.readinessProbe [object] Configure the deployment's readiness probe.
  readinessProbe:
    enabled: false
    path: /ready
    port: 8080
    config: {}

  ## @param deployment.extraEnv [array, default: []] Extra environment variables to be passed to the controller container.
  extraEnv: []

  ## @param deployment.extraPorts [array, default: []] Extra ports to be exposed on the controller container.
  extraPorts: []

## @section PremiScale Controller

controller:
  registration:
    ## @param controller.registration.createSecret [default: false] If true, the controller will create a secret with the registration token. If false, the secret must already exist.
    createSecret: false

    ## @param controller.registration.secretName [string, default: premiscale-registration-token] The name of the secret that contains the registration token. If createSecret is true, the controller will create this secret. If createSecret is false, the controller will use this secret and expects it to exist.
    secretName: premiscale-registration-token

    ## @param controller.registration.key [string, default: token] The key in the secret that contains the registration token.
    key: token

    ## @param controller.registration.value [string] User-provided platform registration key.
    value: ''

    ## @param controller.registration.immutable [default: true] If true, the registration secret cannot be updated. If false, the registration secret can be updated.
    immutable: true

  config:
    ## @param controller.config.mountPath [string, default: /opt/premiscale/config.yaml] The path where the controller config file is mounted.
    mountPath: /opt/premiscale/config.yaml

  logging:
    ## @param controller.logging.level [string, default: info] Can be one of info|debug|warn|error.
    level: info

  ## @param controller.extraEnv [array, default: []] Extra environment variables to be passed to the controller container. These are useful for injecting and referencing environment variables in the config that's read from the ConfigMap below.
  extraEnv: []


## @section RBAC configuration


serviceAccount:
  ## @param serviceAccount.create [default: true] If true, a service account will be created.
  create: true


## @section PremiScale Controller Config


configMap:
  ## @param configMap.enabled [default: false] Enable or disable the ConfigMap. If enabled, the controller will read its config from the specified ConfigMap.
  enabled: false

  ## @param configMap.config [string] The controller config file.
  config: |+
    Your PremiScale controller config file.

  ## @param configMap.immutable [default: false] If true, the ConfigMap cannot be updated. If false, the ConfigMap can be updated.
  immutable: false

  ## @param configMap.labels [object] Labels to be added to the ConfigMap.
  labels: {}

  ## @param configMap.annotations [object] Annotations to be added to the ConfigMap.
  annotations: {}


## @section Controller service


service:
  ## @param service.enabled [default: true] Enable or disable the service. If ingress is enabled, the service type is automatically enabled and the type switched to LoadBalancer.
  enabled: true

  ## @param service.type [string, default: ClusterIP] The service type.
  type: ClusterIP

  ports:
    ## @param service.ports.liveness [object] Configure the liveness probe port.
    liveness:
      protocol: TCP
      port: 8080
      targetPort: 8080


## @section Kubernetes autoscaler


cluster-autoscaler:
  ## @param cluster-autoscaler.enabled [default: false] Enable or disable the autoscaler dependency of the PremiScale controller. Enable this if you would like to autoscale the cluster on which the controller resides.
  enabled: false