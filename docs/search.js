window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "premiscale", "modulename": "premiscale", "kind": "module", "doc": "<p>Make the environment variables' values that we care about, portable.</p>\n"}, {"fullname": "premiscale.log", "modulename": "premiscale", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale (WARNING)&gt;"}, {"fullname": "premiscale.env", "modulename": "premiscale", "qualname": "env", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, str]", "default_value": "{&#x27;PREMISCALE_TOKEN&#x27;: &#x27;&#x27;, &#x27;PREMISCALE_CONFIG_PATH&#x27;: &#x27;/opt/premiscale/config.yaml&#x27;, &#x27;PREMISCALE_CACERT&#x27;: &#x27;&#x27;, &#x27;PREMISCALE_LOG_LEVEL&#x27;: &#x27;info&#x27;, &#x27;PREMISCALE_LOG_FILE&#x27;: &#x27;/opt/premiscale/controller.log&#x27;}"}, {"fullname": "premiscale.version", "modulename": "premiscale", "qualname": "version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;0.0.1&#x27;"}, {"fullname": "premiscale.api", "modulename": "premiscale.api", "kind": "module", "doc": "<p>Encapsulates the API for the PremiScale controller.</p>\n"}, {"fullname": "premiscale.api.log", "modulename": "premiscale.api", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger werkzeug (ERROR)&gt;"}, {"fullname": "premiscale.api.healthcheck", "modulename": "premiscale.api.healthcheck", "kind": "module", "doc": "<p>This module is responsible for the healthcheck API.</p>\n"}, {"fullname": "premiscale.api.healthcheck.app", "modulename": "premiscale.api.healthcheck", "qualname": "app", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Flask &#x27;premiscale.api.healthcheck&#x27;&gt;"}, {"fullname": "premiscale.autoscaling", "modulename": "premiscale.autoscaling", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.autoscaling.log", "modulename": "premiscale.autoscaling", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.autoscaling (WARNING)&gt;"}, {"fullname": "premiscale.autoscaling.ASG", "modulename": "premiscale.autoscaling", "qualname": "ASG", "kind": "class", "doc": "<p>Handle actions. E.g., if a new VM needs to be created or deleted on some host,\nhandle that action, and all relevant side-effects (e.g. updating MySQL state).</p>\n\n<p>One of these classes gets instantiated for every autoscaling group defined in\nthe config.</p>\n"}, {"fullname": "premiscale.autoscaling.ASG.__init__", "modulename": "premiscale.autoscaling", "qualname": "ASG.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span>)</span>"}, {"fullname": "premiscale.autoscaling.ASG.config", "modulename": "premiscale.autoscaling", "qualname": "ASG.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.autoscaling.ASG.queue", "modulename": "premiscale.autoscaling", "qualname": "ASG.queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": multiprocessing.queues.Queue"}, {"fullname": "premiscale.autoscaling.actions", "modulename": "premiscale.autoscaling.actions", "kind": "module", "doc": "<p>Define actions the agent can take against infrastructure.</p>\n"}, {"fullname": "premiscale.autoscaling.actions.Verb", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb", "kind": "class", "doc": "<p>Classify different C[R]UD operations the controller can take on infrastructure, e.g. creating, deleting,\nor migrating VMs.</p>\n", "bases": "enum.Enum"}, {"fullname": "premiscale.autoscaling.actions.Verb.NULL", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.NULL: 0&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.CREATE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.CREATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.CREATE: 1&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.CLONE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.CLONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.CLONE: 3&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.MIGRATE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.MIGRATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.MIGRATE: 2&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.REPLACE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.REPLACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.REPLACE: 4&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.DELETE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.DELETE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.DELETE: 10&gt;"}, {"fullname": "premiscale.autoscaling.actions.Verb.DELETE_STORAGE", "modulename": "premiscale.autoscaling.actions", "qualname": "Verb.DELETE_STORAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Verb.DELETE_STORAGE: 11&gt;"}, {"fullname": "premiscale.autoscaling.actions.Action", "modulename": "premiscale.autoscaling.actions", "qualname": "Action", "kind": "class", "doc": "<p>Encapsulate the various actions that the autoscaler can take. These get queued up and acted upon in the\nautoscaling subprocess as threads. One action is processed at a time in each thread, and each thread\ncorresponds to an ASG.</p>\n", "bases": "abc.ABC"}, {"fullname": "premiscale.autoscaling.actions.Action.action", "modulename": "premiscale.autoscaling.actions", "qualname": "Action.action", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.autoscaling.actions.Action.audit_trail_msg", "modulename": "premiscale.autoscaling.actions", "qualname": "Action.audit_trail_msg", "kind": "function", "doc": "<p>Return a dictionary (JSON) object containing audit data about the action taken.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: generates an audit trail message based on what occurred with the Action's execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.autoscaling.actions.Action.kind", "modulename": "premiscale.autoscaling.actions", "qualname": "Action.kind", "kind": "function", "doc": "<p>Return the type of action.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Verb: the type of action.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">autoscaling</span><span class=\"o\">.</span><span class=\"n\">actions</span><span class=\"o\">.</span><span class=\"n\">Verb</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.autoscaling.actions.Null", "modulename": "premiscale.autoscaling.actions", "qualname": "Null", "kind": "class", "doc": "<p>Action encapsulating logic to do nothing on a VM on a particular host.</p>\n", "bases": "Action"}, {"fullname": "premiscale.autoscaling.actions.Create", "modulename": "premiscale.autoscaling.actions", "qualname": "Create", "kind": "class", "doc": "<p>Action encapsulating logic to create a VM on a particular host.</p>\n", "bases": "Action"}, {"fullname": "premiscale.autoscaling.actions.Migrate", "modulename": "premiscale.autoscaling.actions", "qualname": "Migrate", "kind": "class", "doc": "<p>Action encapsulating logic to migrate a VM from one host to another.</p>\n", "bases": "Action"}, {"fullname": "premiscale.cli", "modulename": "premiscale.cli", "kind": "module", "doc": "<p>The PremiScale autoscaling controller for Kubernetes.</p>\n"}, {"fullname": "premiscale.cli.log", "modulename": "premiscale.cli", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.cli (WARNING)&gt;"}, {"fullname": "premiscale.cli.main", "modulename": "premiscale.cli", "qualname": "main", "kind": "function", "doc": "<p>Set up the CLI for PremiScale autoscaler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.config", "modulename": "premiscale.config", "kind": "module", "doc": "<p>This module contains methods, schemas and classes for parsing and validating configuration files.</p>\n"}, {"fullname": "premiscale.config.parse", "modulename": "premiscale.config.parse", "kind": "module", "doc": "<p>Parse a configuration file, or create a default one.</p>\n"}, {"fullname": "premiscale.config.parse.configParse", "modulename": "premiscale.config.parse", "qualname": "configParse", "kind": "function", "doc": "<p>Parse a config file and return it as a Config-object. Optionally validate types and structure against the Yamale schema.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (str):</strong>  path to the config file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Config: The parsed config file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.config.parse.validate", "modulename": "premiscale.config.parse", "qualname": "validate", "kind": "function", "doc": "<p>Validate users' config files against our schema.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  config file path/name to validate against the schema.</li>\n<li><strong>version (str):</strong>  the version of the config file to validate. (default: 'v1alpha1')</li>\n<li><strong>strict (bool):</strong>  whether or not to use strict mode on yamale. (default: True)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple[str, bool]: a tuple containing the error message and a boolean indicating if the config is valid.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;v1alpha1&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">strict</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.config.schemas", "modulename": "premiscale.config.schemas", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.config.v1alpha1", "modulename": "premiscale.config.v1alpha1", "kind": "module", "doc": "<p>Parse v1alpha1 configuration files into a Config object with attrs and cattrs.</p>\n"}, {"fullname": "premiscale.config.v1alpha1.Config", "modulename": "premiscale.config.v1alpha1", "qualname": "Config", "kind": "class", "doc": "<p>Parse config files of version v1alpha1.</p>\n"}, {"fullname": "premiscale.config.v1alpha1.Config.__init__", "modulename": "premiscale.config.v1alpha1", "qualname": "Config.__init__", "kind": "function", "doc": "<p>Method generated by attrs for class Config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">controller</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Controller</span></span>)</span>"}, {"fullname": "premiscale.config.v1alpha1.Config.version", "modulename": "premiscale.config.v1alpha1", "qualname": "Config.version", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "premiscale.config.v1alpha1.Config.controller", "modulename": "premiscale.config.v1alpha1", "qualname": "Config.controller", "kind": "variable", "doc": "<p></p>\n", "annotation": ": premiscale.config.v1alpha1.Controller"}, {"fullname": "premiscale.config.v1alpha1.Config.from_dict", "modulename": "premiscale.config.v1alpha1", "qualname": "Config.from_dict", "kind": "function", "doc": "<p>Create a Config object from a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>config (dict):</strong>  The config dictionary.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Config: The Config object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.controller", "modulename": "premiscale.controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.controller.reconciliation", "modulename": "premiscale.controller.reconciliation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.controller.reconciliation.log", "modulename": "premiscale.controller.reconciliation", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.controller.reconciliation (WARNING)&gt;"}, {"fullname": "premiscale.controller.reconciliation.Reconcile", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile", "kind": "class", "doc": "<p>Similar to metrics - a reconciliation loop that queries influxdb for the list of VMs\nmetrics came from and compares these data to state stored in MySQL. If they don't match,\nactions to correct the state drift are added to the queue.</p>\n"}, {"fullname": "premiscale.controller.reconciliation.Reconcile.__init__", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span>)</span>"}, {"fullname": "premiscale.controller.reconciliation.Reconcile.state_database", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile.state_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.controller.reconciliation.Reconcile.metrics_database", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile.metrics_database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.controller.reconciliation.Reconcile.platform_queue", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile.platform_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": multiprocessing.queues.Queue"}, {"fullname": "premiscale.controller.reconciliation.Reconcile.asg_queue", "modulename": "premiscale.controller.reconciliation", "qualname": "Reconcile.asg_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": multiprocessing.queues.Queue"}, {"fullname": "premiscale.exceptions", "modulename": "premiscale.exceptions", "kind": "module", "doc": "<p>Custom exceptions for the premiscale package.</p>\n"}, {"fullname": "premiscale.exceptions.RateLimitedError", "modulename": "premiscale.exceptions", "qualname": "RateLimitedError", "kind": "class", "doc": "<p>Raised when an HTTPStatus.TOO_MANY_REQUESTS code is received.</p>\n", "bases": "builtins.Exception"}, {"fullname": "premiscale.exceptions.RateLimitedError.__init__", "modulename": "premiscale.exceptions", "qualname": "RateLimitedError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">30.0</span></span>)</span>"}, {"fullname": "premiscale.exceptions.RateLimitedError.message", "modulename": "premiscale.exceptions", "qualname": "RateLimitedError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.exceptions.RateLimitedError.delay", "modulename": "premiscale.exceptions", "qualname": "RateLimitedError.delay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.hypervisor", "modulename": "premiscale.hypervisor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.hypervisor.esx", "modulename": "premiscale.hypervisor.esx", "kind": "module", "doc": "<p>Implement a Libvirt connection to an ESX-based hypervisor/host.</p>\n"}, {"fullname": "premiscale.hypervisor.esx.Esx", "modulename": "premiscale.hypervisor.esx", "qualname": "Esx", "kind": "class", "doc": "<p>Connect to an ESXi hypervisor.</p>\n", "bases": "premiscale.hypervisor.libvirt.Libvirt"}, {"fullname": "premiscale.hypervisor.kubevirt", "modulename": "premiscale.hypervisor.kubevirt", "kind": "module", "doc": "<p>Manage KubeVirt resources.</p>\n"}, {"fullname": "premiscale.hypervisor.libvirt", "modulename": "premiscale.hypervisor.libvirt", "kind": "module", "doc": "<p>Provide methods to interact with the Libvirt API.</p>\n"}, {"fullname": "premiscale.hypervisor.libvirt.Libvirt", "modulename": "premiscale.hypervisor.libvirt", "qualname": "Libvirt", "kind": "class", "doc": "<p>Connect to hosts and provide an interface for interacting with VMs on them.</p>\n"}, {"fullname": "premiscale.hypervisor.qemu", "modulename": "premiscale.hypervisor.qemu", "kind": "module", "doc": "<p>Implement a Libvirt connection to a kvm-based hypervisor/host.</p>\n"}, {"fullname": "premiscale.hypervisor.qemu.Qemu", "modulename": "premiscale.hypervisor.qemu", "qualname": "Qemu", "kind": "class", "doc": "<p>Connect to a Qemu hypervisor.</p>\n", "bases": "premiscale.hypervisor.libvirt.Libvirt"}, {"fullname": "premiscale.hypervisor.xen", "modulename": "premiscale.hypervisor.xen", "kind": "module", "doc": "<p>Implement a Libvirt connection to a Xen-based hypervisor/host.</p>\n"}, {"fullname": "premiscale.hypervisor.xen.Xen", "modulename": "premiscale.hypervisor.xen", "qualname": "Xen", "kind": "class", "doc": "<p>Connect to an Xen hypervisor.</p>\n", "bases": "premiscale.hypervisor.libvirt.Libvirt"}, {"fullname": "premiscale.kubernetes", "modulename": "premiscale.kubernetes", "kind": "module", "doc": "<p>Interface with the Kubernetes autoscaler.</p>\n"}, {"fullname": "premiscale.kubernetes.log", "modulename": "premiscale.kubernetes", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.kubernetes (WARNING)&gt;"}, {"fullname": "premiscale.kubernetes.KubernetesAutoscaler", "modulename": "premiscale.kubernetes", "qualname": "KubernetesAutoscaler", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "premiscale.kubernetes.KubernetesAutoscaler.__init__", "modulename": "premiscale.kubernetes", "qualname": "KubernetesAutoscaler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span>)</span>"}, {"fullname": "premiscale.kubernetes.interface", "modulename": "premiscale.kubernetes.interface", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.metrics", "modulename": "premiscale.metrics", "kind": "module", "doc": "<p>A module for handling metrics collection from hosts.</p>\n"}, {"fullname": "premiscale.metrics.log", "modulename": "premiscale.metrics", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.metrics (WARNING)&gt;"}, {"fullname": "premiscale.metrics.build_metrics", "modulename": "premiscale.metrics", "qualname": "build_metrics", "kind": "function", "doc": "<p>Build a metrics collection class instance for storing metrics  hosts. Only one of these loops is created; metrics\nare published to influxdb for retrieval and query by the ASG loop, which evaluates\non a per-ASG basis whether Actions need to be taken.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">Metrics</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.metrics.influxdb", "modulename": "premiscale.metrics.influxdb", "kind": "module", "doc": "<p>Methods for interacting with influxdb.</p>\n"}, {"fullname": "premiscale.metrics.influxdb.InfluxDB", "modulename": "premiscale.metrics.influxdb", "qualname": "InfluxDB", "kind": "class", "doc": "<p>Implement required interface methods that connect with InfluxDB.</p>\n", "bases": "premiscale.metrics._base.Metrics"}, {"fullname": "premiscale.metrics.influxdb.InfluxDB.__init__", "modulename": "premiscale.metrics.influxdb", "qualname": "InfluxDB.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "premiscale.metrics.influxdb.InfluxDB.url", "modulename": "premiscale.metrics.influxdb", "qualname": "InfluxDB.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.metrics.influxdb.InfluxDB.database", "modulename": "premiscale.metrics.influxdb", "qualname": "InfluxDB.database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.metrics.local", "modulename": "premiscale.metrics.local", "kind": "module", "doc": "<p>Methods for interacting with an in-memory metrics store.</p>\n"}, {"fullname": "premiscale.metrics.local.Local", "modulename": "premiscale.metrics.local", "qualname": "Local", "kind": "class", "doc": "<p>Implement required interface methods for storing host metrics in memory.</p>\n", "bases": "premiscale.metrics._base.Metrics"}, {"fullname": "premiscale.metrics.local.Local.__init__", "modulename": "premiscale.metrics.local", "qualname": "Local.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span>)</span>"}, {"fullname": "premiscale.metrics.local.Local.config", "modulename": "premiscale.metrics.local", "qualname": "Local.config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.platform", "modulename": "premiscale.platform", "kind": "module", "doc": "<p>Methods relating to connecting to PremiScale's platform.</p>\n"}, {"fullname": "premiscale.platform.log", "modulename": "premiscale.platform", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.platform (WARNING)&gt;"}, {"fullname": "premiscale.platform.Platform", "modulename": "premiscale.platform", "qualname": "Platform", "kind": "class", "doc": "<p>Handle communication to and from the platform. Maintains an async websocket\nconnection and calls setters and getters on the other daemon threads' objects to\nconfigure them.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>registration (Dict[str, str]):</strong>  registration response from the registration service.</li>\n<li><strong>version (str):</strong>  controller version.</li>\n<li><strong>host (str):</strong>  platform host.</li>\n<li><strong>wspath (str):</strong>  path to the websocket endpoint.</li>\n<li><strong>cacert (str):</strong>  path to the certificate file (for use with self-signed certificates).</li>\n</ul>\n"}, {"fullname": "premiscale.platform.Platform.__init__", "modulename": "premiscale.platform", "qualname": "Platform.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">registration</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;app.premiscale.com&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">wspath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/agent/websocket&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cacert</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "premiscale.platform.Platform.host", "modulename": "premiscale.platform", "qualname": "Platform.host", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.platform.Platform.version", "modulename": "premiscale.platform", "qualname": "Platform.version", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.platform.Platform.register", "modulename": "premiscale.platform", "qualname": "Platform.register", "kind": "function", "doc": "<p>Register the controller with the PremiScale platform before starting this process. If registration fails, this\nclassmethod returns None to the upstream caller.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>token (str):</strong>  registration API token.</li>\n<li><strong>version (str):</strong>  agent version.</li>\n<li><strong>host (str):</strong>  platform domain.</li>\n<li><strong>registration_path (str):</strong>  path to the registration endpoint.</li>\n<li><strong>websocket_path (str):</strong>  path to the controller websocket endpoint.</li>\n<li><strong>cacert (str):</strong>  path to the CA certificate file, if provided.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Platform | None: registration service response, or an empty dict if the registration was not successful.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>RateLimitedError:</strong>  if the request is rate limited.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">registration_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/agent/registration&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">websocket_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/agent/websocket&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cacert</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">platform</span><span class=\"o\">.</span><span class=\"n\">Platform</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.platform.Platform.sync_actions", "modulename": "premiscale.platform", "qualname": "Platform.sync_actions", "kind": "function", "doc": "<p>Sync actions taken by the controller for auditing.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the sync was successful.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "premiscale.platform.Platform.sync_metrics", "modulename": "premiscale.platform", "qualname": "Platform.sync_metrics", "kind": "function", "doc": "<p>Sync metrics to the platform.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the sync was successful.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "premiscale.platform.Platform.send_message", "modulename": "premiscale.platform", "qualname": "Platform.send_message", "kind": "function", "doc": "<p>Asynchronously send a message up to the platform.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>msg (str):</strong>  Message to send.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the item was queued.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "premiscale.platform.utils", "modulename": "premiscale.platform.utils", "kind": "module", "doc": "<p>Utility methods for the platform module.</p>\n"}, {"fullname": "premiscale.platform.utils.log", "modulename": "premiscale.platform.utils", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.platform.utils (WARNING)&gt;"}, {"fullname": "premiscale.platform.utils.retry", "modulename": "premiscale.platform.utils", "qualname": "retry", "kind": "function", "doc": "<p>A request retry decorator that catches common request exceptions and retries the wrapped function call.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>retries (int):</strong>  number of times to retry the wrapped function call. When <code>0</code>, retries indefinitely. (default: 0)</li>\n<li><strong>retry_delay (float):</strong>  if retries is 0, this delay value (in seconds) is used between retries. (default: 1.0)</li>\n<li><strong>ratelimit_buffer (float):</strong>  a buffer (in seconds) to add to the delay when a rate limit is hit. (default: 0.25)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Callable: a decorator for the wrapped function.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  if <code>retries</code> is less than 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">retries</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">retry_delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">ratelimit_buffer</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.25</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state", "modulename": "premiscale.state", "kind": "module", "doc": "<p>A high-level interface to working with different state backends.</p>\n"}, {"fullname": "premiscale.state.log", "modulename": "premiscale.state", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.state (WARNING)&gt;"}, {"fullname": "premiscale.state.build_state", "modulename": "premiscale.state", "qualname": "build_state", "kind": "function", "doc": "<p>Manufacture a state backend based on the configuration.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">v1alpha1</span><span class=\"o\">.</span><span class=\"n\">Config</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">_base</span><span class=\"o\">.</span><span class=\"n\">State</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local", "modulename": "premiscale.state.local", "kind": "module", "doc": "<p>Methods for interacting with the in-memory database.</p>\n"}, {"fullname": "premiscale.state.local.log", "modulename": "premiscale.state.local", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.state.local (WARNING)&gt;"}, {"fullname": "premiscale.state.local.Local", "modulename": "premiscale.state.local", "qualname": "Local", "kind": "class", "doc": "<p>Implement a high-level interface to an in-memory state database.</p>\n", "bases": "premiscale.state._base.State"}, {"fullname": "premiscale.state.local.Local.is_connected", "modulename": "premiscale.state.local", "qualname": "Local.is_connected", "kind": "function", "doc": "<p>Check if the connection to the MySQL database is open.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the connection is open.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.open", "modulename": "premiscale.state.local", "qualname": "Local.open", "kind": "function", "doc": "<p>Open a connection to the MySQL database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.close", "modulename": "premiscale.state.local", "qualname": "Local.close", "kind": "function", "doc": "<p>Close the connection with the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.host_create", "modulename": "premiscale.state.local", "qualname": "Local.host_create", "kind": "function", "doc": "<p>Create a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hostname (str):</strong>  name to give host.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.host_delete", "modulename": "premiscale.state.local", "qualname": "Local.host_delete", "kind": "function", "doc": "<p>Delete a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hostname (str):</strong>  name of host to delete the record for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.host_report", "modulename": "premiscale.state.local", "qualname": "Local.host_report", "kind": "function", "doc": "<p>Get a report of currently-managed hosts.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.vm_create", "modulename": "premiscale.state.local", "qualname": "Local.vm_create", "kind": "function", "doc": "<p>Create a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  host on which to provision the VM.</li>\n<li><strong>vm_name (str):</strong>  name to give the new VM.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.vm_delete", "modulename": "premiscale.state.local", "qualname": "Local.vm_delete", "kind": "function", "doc": "<p>Delete a VM on a specified host.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  host on which to delete the VM.</li>\n<li><strong>vm_name (str):</strong>  name of VM to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.vm_report", "modulename": "premiscale.state.local", "qualname": "Local.vm_report", "kind": "function", "doc": "<p>Get a report of VMs presently-managed on a host.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which to retrieve VM entries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.asg_create", "modulename": "premiscale.state.local", "qualname": "Local.asg_create", "kind": "function", "doc": "<p>Create an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name to give the ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.asg_delete", "modulename": "premiscale.state.local", "qualname": "Local.asg_delete", "kind": "function", "doc": "<p>Delete an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of ASG to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.asg_add_vm", "modulename": "premiscale.state.local", "qualname": "Local.asg_add_vm", "kind": "function", "doc": "<p>Add a VM on a host to an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which the VM resides.</li>\n<li><strong>vm_name (str):</strong>  Name of VM to add to ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.asg_remove_vm", "modulename": "premiscale.state.local", "qualname": "Local.asg_remove_vm", "kind": "function", "doc": "<p>Remove a VM on a host from an ASG.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which the VM resides.</li>\n<li><strong>vm_name (str):</strong>  Name of VM to remove from ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.local.Local.asg_report", "modulename": "premiscale.state.local", "qualname": "Local.asg_report", "kind": "function", "doc": "<p>Get a report of current autoscaling groups' standings. Optionally enable VMs be returned on hosts as well.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vm_enabled (bool, optional):</strong>  Return VMs on hosts as well. Defaults to False as it's a more expensive operation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vm_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql", "modulename": "premiscale.state.mysql", "kind": "module", "doc": "<p>Methods for interacting with the MySQL database.</p>\n"}, {"fullname": "premiscale.state.mysql.log", "modulename": "premiscale.state.mysql", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.state.mysql (WARNING)&gt;"}, {"fullname": "premiscale.state.mysql.MySQL", "modulename": "premiscale.state.mysql", "qualname": "MySQL", "kind": "class", "doc": "<p>Provide a clean interface to the MySQL database.</p>\n", "bases": "premiscale.state._base.State"}, {"fullname": "premiscale.state.mysql.MySQL.__init__", "modulename": "premiscale.state.mysql", "qualname": "MySQL.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "premiscale.state.mysql.MySQL.url", "modulename": "premiscale.state.mysql", "qualname": "MySQL.url", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.state.mysql.MySQL.database", "modulename": "premiscale.state.mysql", "qualname": "MySQL.database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "premiscale.state.mysql.MySQL.is_connected", "modulename": "premiscale.state.mysql", "qualname": "MySQL.is_connected", "kind": "function", "doc": "<p>Check if the connection to the MySQL database is open.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the connection is open.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.open", "modulename": "premiscale.state.mysql", "qualname": "MySQL.open", "kind": "function", "doc": "<p>Open a connection to the MySQL database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.close", "modulename": "premiscale.state.mysql", "qualname": "MySQL.close", "kind": "function", "doc": "<p>Close the connection with the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.host_create", "modulename": "premiscale.state.mysql", "qualname": "MySQL.host_create", "kind": "function", "doc": "<p>Create a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hostname (str):</strong>  name to give host.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.host_delete", "modulename": "premiscale.state.mysql", "qualname": "MySQL.host_delete", "kind": "function", "doc": "<p>Delete a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hostname (str):</strong>  name of host to delete the record for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.host_report", "modulename": "premiscale.state.mysql", "qualname": "MySQL.host_report", "kind": "function", "doc": "<p>Get a report of currently-managed hosts.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.vm_create", "modulename": "premiscale.state.mysql", "qualname": "MySQL.vm_create", "kind": "function", "doc": "<p>Create a host record.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  host on which to provision the VM.</li>\n<li><strong>vm_name (str):</strong>  name to give the new VM.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.vm_delete", "modulename": "premiscale.state.mysql", "qualname": "MySQL.vm_delete", "kind": "function", "doc": "<p>Delete a VM on a specified host.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  host on which to delete the VM.</li>\n<li><strong>vm_name (str):</strong>  name of VM to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.vm_report", "modulename": "premiscale.state.mysql", "qualname": "MySQL.vm_report", "kind": "function", "doc": "<p>Get a report of VMs presently-managed on a host.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which to retrieve VM entries.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.asg_create", "modulename": "premiscale.state.mysql", "qualname": "MySQL.asg_create", "kind": "function", "doc": "<p>Create an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name to give the ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.asg_delete", "modulename": "premiscale.state.mysql", "qualname": "MySQL.asg_delete", "kind": "function", "doc": "<p>Delete an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  Name of ASG to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.asg_add_vm", "modulename": "premiscale.state.mysql", "qualname": "MySQL.asg_add_vm", "kind": "function", "doc": "<p>Add a VM on a host to an autoscaling group.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which the VM resides.</li>\n<li><strong>vm_name (str):</strong>  Name of VM to add to ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.asg_remove_vm", "modulename": "premiscale.state.mysql", "qualname": "MySQL.asg_remove_vm", "kind": "function", "doc": "<p>Remove a VM on a host from an ASG.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>host (str):</strong>  Name of host on which the VM resides.</li>\n<li><strong>vm_name (str):</strong>  Name of VM to remove from ASG.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">vm_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.mysql.MySQL.asg_report", "modulename": "premiscale.state.mysql", "qualname": "MySQL.asg_report", "kind": "function", "doc": "<p>Get a report of current autoscaling groups' standings. Optionally enable VMs be returned on hosts as well.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vm_enabled (bool, optional):</strong>  Return VMs on hosts as well. Defaults to False as it's a more expensive operation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if action completed successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vm_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.state.sql", "modulename": "premiscale.state.sql", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "premiscale.utils", "modulename": "premiscale.utils", "kind": "module", "doc": "<p>Controller utils.</p>\n"}, {"fullname": "premiscale.utils.log", "modulename": "premiscale.utils", "qualname": "log", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger premiscale.utils (WARNING)&gt;"}, {"fullname": "premiscale.utils.LogLevel", "modulename": "premiscale.utils", "qualname": "LogLevel", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "premiscale.utils.LogLevel.info", "modulename": "premiscale.utils", "qualname": "LogLevel.info", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LogLevel.info: 20&gt;"}, {"fullname": "premiscale.utils.LogLevel.error", "modulename": "premiscale.utils", "qualname": "LogLevel.error", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LogLevel.error: 40&gt;"}, {"fullname": "premiscale.utils.LogLevel.warn", "modulename": "premiscale.utils", "qualname": "LogLevel.warn", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LogLevel.warn: 30&gt;"}, {"fullname": "premiscale.utils.LogLevel.debug", "modulename": "premiscale.utils", "qualname": "LogLevel.debug", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;LogLevel.debug: 10&gt;"}, {"fullname": "premiscale.utils.LogLevel.from_string", "modulename": "premiscale.utils", "qualname": "LogLevel.from_string", "kind": "function", "doc": "<p>Convert a string to the enum value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>s (str):</strong>  key to convert to the enum value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>LogLevel: Log level object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">premiscale</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">LogLevel</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.utils.validate_port", "modulename": "premiscale.utils", "qualname": "validate_port", "kind": "function", "doc": "<p>Validates port number as a string or int.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>number (str | int):</strong>  the port number as either an int or a str.</li>\n<li><strong>port_name (str | None):</strong>  the name of the port (to use in error messages).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the port number, if it passes all checks.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">port_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.utils.write_json", "modulename": "premiscale.utils", "qualname": "write_json", "kind": "function", "doc": "<p>Write a dictionary to a JSON file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict):</strong>  the dictionary to write.</li>\n<li><strong>path (str):</strong>  the path to write the file to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "premiscale.utils.read_json", "modulename": "premiscale.utils", "qualname": "read_json", "kind": "function", "doc": "<p>Read a JSON file and return the data as a dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str):</strong>  the path to the JSON file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict | None: the data from the JSON file, or None if the file does not exist.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();